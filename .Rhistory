install.packages("ggplot2")
install.packages("maps")
install.packages("shiny")
setwd("~/Coursera/R Data Product")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
avRep <- "data/reputation.data"
av.df <- read.csv(avRep, sep="#", header=FALSE)
colnames(av.df) <- c("IP", "Reliability", "Risk", "Type",
"Country", "Locale", "Coords", "x")
# create a vector of lat/long data by splitting on ","
av.coords.vec <- unlist(strsplit(as.character(av.df$Coords), ","))
# convert the vector in a 2-column matrix
av.coords.mat <- matrix(av.coords.vec, ncol=2, byrow=TRUE)
# project into a data frame
av.coords.df <- as.data.frame(av.coords.mat)
# name the columns
colnames(av.coords.df) <- c("lat","long")
# convert the characters to numeric values
av.coords.df$long <- as.double(as.character(av.coords.df$long))
av.coords.df$lat <- as.double(as.character(av.coords.df$lat))
set2 <- brewer.pal(8,"Set2")
world <- map_data('world')
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill=fillcolor) +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill='black') +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill='white') +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
world <- map_data('france')
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill='white') +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
world <- map_data('france')
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill='black') +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
world <- map_data('world','China')
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill='black') +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
set2 <- brewer.pal(8,"Set2")
world <- map_data('world1')
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill='black') +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
set2 <- brewer.pal(8,"Set2")
world <- map_data('world')
ggplot() +
geom_polygon(data=world, aes(long, lat, group=group), fill='black') +
geom_point(data=av.coords.df, aes(x=long, y=lat),color=set2[2], size=1, alpha=0.1) +
labs(x="", y="") +
theme(panel.background=element_rect(fill=alpha(set2[3],0.2), colour='white')) +
coord_fixed()
head(world)
world$region
names(av.df)
head(av.df$Type)
unique(av.df$Type)
tables(av.df$Type)
table(av.df$Type)
sum(av.df$type =="Scanning Host")
sum(av.df$type =="Scanning Host;Malware Domain")
sum(av.df$Type =="Scanning Host;Malware Domain")
sum(av.df$Type =="Scanning Host")
sum(av.df$Type =="Spamming")
table(av.df$Country)
install.packages('plyr')
install.packages("plyr")
count(av.df, 'country')
libary('plyr')
library('plyr')
count(av.df, 'country')
count(av.df, 'Country')
countrySum <- count(av.df, 'Country')
arrange(countrySum,freq)
arrange(countrySum,-freq)
countrySum(is.na(countrySum)) <- "unknown"
countrySum[is.na(countrySum)] <- "unknown"
head(countrySum)
head(arrange(countrySum,freq))
head(arrange(countrySum,-freq))
countrySum <- count(av.df, 'Country')
countrySum[countrySum$Country=='',]$Country <- 'Unknown'
countrySum[countrySum$Country=='',]$Country
countrySum[countrySum$Country==' ',]$Country
countrySum[countrySum$Country==' ',]
countrySum[countrySum$Country=='',]
countrySum[countrySum$Country=='  ',]
head(arrange(countrySum,-freq))[4]
arrange(countrySum,-freq)[4]
arrange(countrySum,-freq)[4,1]
arrange(countrySum,-freq)[4,2]
countrySum[is.na(countrySum$Country)]
countrySum[is.na(Country)]
countrySum[is.na(countrySum$Country),]
countrySum[is.na(countrySum$Country),]$Country
countrySum[is.na(countrySum$Country),1]
countrySum[is.na(countrySum$Country),]$freq
countrySum[is.na(countrySum$Country),]$Country <- 'Unknown'
countrySum[is.na(countrySum$Country),]$Country <- "Unknown"
av.df[is.na(av.df)] <- 'unknow'
avRep <- "data/reputation.data"
av.df <- read.csv(avRep, sep="#", header=FALSE)
colnames(av.df) <- c("IP", "Reliability", "Risk", "Type",
"Country", "Locale", "Coords", "x")
# create a vector of lat/long data by splitting on ","
av.coords.vec <- unlist(strsplit(as.character(av.df$Coords), ","))
# convert the vector in a 2-column matrix
av.coords.mat <- matrix(av.coords.vec, ncol=2, byrow=TRUE)
# project into a data frame
av.coords.df <- as.data.frame(av.coords.mat)
# name the columns
colnames(av.coords.df) <- c("lat","long")
# convert the characters to numeric values
av.coords.df$long <- as.double(as.character(av.coords.df$long))
av.coords.df$lat <- as.double(as.character(av.coords.df$lat))
av.df[is.na(av.df)] <- 'Unknown'
countrySum <- count(av.df, 'Country')
head(arrange(countrySum,-freq))
is.na(head(arrange(countrySum,-freq)))
arrange(countrySum,-freq)[4]
arrange(countrySum,-freq)[4,]
arrange(countrySum,-freq)[4,1]
avRep <- "data/reputation.data"
av.df <- read.csv(avRep, sep="#", header=FALSE, na.strings = c("NA","NAN","",' '))
colnames(av.df) <- c("IP", "Reliability", "Risk", "Type",
"Country", "Locale", "Coords", "x")
# create a vector of lat/long data by splitting on ","
av.coords.vec <- unlist(strsplit(as.character(av.df$Coords), ","))
# convert the vector in a 2-column matrix
av.coords.mat <- matrix(av.coords.vec, ncol=2, byrow=TRUE)
# project into a data frame
av.coords.df <- as.data.frame(av.coords.mat)
# name the columns
colnames(av.coords.df) <- c("lat","long")
# convert the characters to numeric values
av.coords.df$long <- as.double(as.character(av.coords.df$long))
av.coords.df$lat <- as.double(as.character(av.coords.df$lat))
countrySum <- count(av.df, 'Country')
arrange(countrySum,-freq)[4,]
av.df[is.na(av.df)] <- 'Unknown'
IPSum <- count(av.df,'IP')
head(IPSum)
head(arrange(IP,-freq))
head(arrange(IPSum,-freq))
arrange(IPSum,-freq)
head(arrange(IPSum,-freq))
arrange(countrySum,-freq)[6,]
arrange(countrySum,-freq)[0:6,]
table(av.df$Type)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(dv.df)
names(av.df)
head(av.df$Risk)
head(av.df$Locale)
hist(av.df$Risk)
nrows(av.df$Risk>2)
nrow(av.df$Risk>2)
nrow(av.df[av.df$Risk>2,])
nrow(av.df[av.df$Risk<3,])
nrow(av.df)
hist(av.df$Reliability)
head(av.df$Locale)
head(av.df$Country)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
av.df[av.df$Type==type(),]
av.df[av.df$Type=='type()'Scanning Host',]
av.df[av.df$Type=='Scanning Host',]
exit()
nrow(av.df[av.df$Type=='Scanning Host',])
table(av.df$Type)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(dplyr)
install.packages(;dplyr)
install.packages('dplyr')
shiny::runApp()
library(dplyr)
install.packages('dplyr')
shiny::runApp()
shiny::runApp()
shiny::runApp()
test <- = filter(av.df, Type == 'Scanning Host')
test <- filter(av.df, Type == 'Scanning Host')
countrySum = count(test, 'Country')
head(countrySum)
head(test)
countrySum = count(av.df, 'Country')
countrySum = count(av.df, 'Country')
head(countrySum)
names(av.df)
countrySum = count(av.df, 'Country')
head(countrySum)
av.df<- read.csv(avRep, sep="#", header=FALSE, na.strings = c('NA','NAN','',' '))
countrySum = count(av.df, 'Country')
head(countrySum)
library(plyr)
countrySum = count(av.df, 'Country')
shiny::runApp()
head(countrySum)
head(av.df$Country)
names(av.df)
setwd("~/Coursera/R Data Product")
avRep <- "data/reputation.data"
av.df <- read.csv(avRep, sep="#", header=FALSE, na.strings = c('NA','NAN','',' '))
colnames(av.df) <- c("IP", "Reliability", "Risk", "Type",
"Country", "Locale", "Coords", "x")
test <- filter(av.df, Type == type())
test <- filter(av.df, Type == 'Scanning Host')
names(test)
countrySum = count(test, 'Country')
head(countrySum)
head(test$Country)
table(test$Country)
countrySum = count(av.df, 'Country')
head(countrySum)
detach('package:dplyr',unload=TRUE)
filter
countrySum = count(av.df, 'Country')
head(countrySum)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp(155.69.150.184)
runApp("Dashboard",host="155.69.150.184",port=7775)
runApp(host="155.69.150.184",port=7775)
runApp(host="155.69.150.184",port=7775)
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='hgiang',
token='E57B87903735F4975AC430ACE7B4A3B4',
secret='ffHgFnQ26Acm6Qix8Z87extjYnlWvSxVQDK4mHdq')
library(shinyapps)
shinyapps::deployApp('C:\Users\HoangGiang\Documents\Coursera\R Data Product')
library(shinyapps)
shinyapps::deployApp('C:\\Users\\HoangGiang\\Documents\\Coursera\\R Data Product')
setwd("~/Coursera")
library(shinyapps)
shinyapps::deployApp('C:\\Users\\HoangGiang\\Documents\\Coursera\\RDataProduct')
A snapshot data is taken from the Alient Vault website (http://reputation.alienvault.com/reputation.data)
A snapshot data is taken from the Alient Vault website (http://reputation.alienvault.com/reputation.data)
Slide With Code
library(knitr )
library(knitr)
install.packages("knitr ")
install.packages("knitr")
A snapshot data is taken from the Alient Vault website (http://reputation.alienvault.com/reputation.data)
Coursera Developing Data Products: Malicious Hosts Visualization
library(devtools)
install.packages(devtools)
install.packages('devtools')
install.packages("devtools")
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/Coursera/RDataProduct/SlidifySlide")
author('hgiang')
slidify("index.Rmd")
slidify("hgiang/index.Rmd")
setwd("~/Coursera/RDataProduct/SlidifySlide/hgiang")
slidify("index.Rmd")
slidify("index.Rmd")
install_github('ramnathv/slidify', ref = github_pull(425))
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
avRep <- "reputation.data"
data <- read.csv(avRep, sep="#", header=FALSE, na.strings = c('NA','NAN','',' '))
colnames(data) <- c("IP", "Reliability", "Risk", "Type","Country", "Locale", "Coords", "x")
head(data)
slidify("index.Rmd")
head(data)
browseURL("index.html")
summary(data)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
setwd("~/Coursera/RDataProduct")
shiny::runApp()
shiny::runApp()
slidify("index.Rmd")
setwd("~/Coursera/RDataProduct/SlidifySlide/hgiang")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'Malicious Hosts Visualization', 'index.html', host = 'rpubs')
?publish
? publish
